{"version":3,"sources":["components/Socket/socket.js","components/Socket/context.js","components/Socket/index.js","components/Game/index.js","components/Game/context.js","components/Board/index.js","components/JoinGame/index.js","components/CreateGame/index.js","components/Lobby/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Socket","io","process","SocketContext","React","createContext","GameContext","game","Board","socket","useContext","gameInfo","setGameInfo","setGameStarted","useState","board","position","setPosition","notification","setNotification","getTurn","turn","useEffect","Chess","playerColor","on","msg","move","fen","game_over","className","title","okText","cancelText","onConfirm","emit","danger","onDrop","piece","sourceSquare","targetSquare","from","to","promotion","allowDrag","orientation","calcWidth","screenWidth","console","log","darkSquareStyle","backgroundColor","lightSquareStyle","JoinGame","gameId","setGameId","isLoading","setLoading","alert","id","span","placeholder","onChange","event","target","value","toUpperCase","size","maxlength","type","onClick","userId","localStorage","getItem","loading","CreateGame","length","chars","result","i","Math","round","random","randomString","block","Lobby","App","gameStarted","setItem","uuid","players","Game","Provider","href","Boolean","window","location","hostname","match","host","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wZAMeA,EAJA,WACb,OAAOC,IAAGC,qCCCGC,EAFOC,IAAMC,cAAc,MCC3BL,ICDAM,ECAKF,IAAMC,cAAc,M,iBCMpCE,G,OAAO,MAyHIC,EAvHD,WACZ,IAAMC,EAASC,qBAAWP,GADR,EAEgCO,qBAAWJ,GAArDK,EAFU,EAEVA,SAFU,KAEAC,YAFA,EAEaC,eAECC,mBAASH,EAASI,QAJhC,mBAIXC,EAJW,KAIDC,EAJC,OAKsBH,mBAAS,IAL/B,mBAKXI,EALW,KAKGC,EALH,KAOZC,EAAU,WACd,IAAIC,EAAOd,EAAKc,OAEhB,OAAQA,GACN,IAAK,IACHA,EAAO,QACP,MACF,IAAK,IACHA,EAAO,QACP,MACF,QACEA,EAAO,QAEX,OAAOA,GAGTC,qBAAU,WAENf,EADqB,UAAnBI,EAASI,MACJ,IAAIQ,IAEJ,IAAIA,IAAMZ,EAASI,OAGfK,MACAT,EAASa,YACpBL,EAAgB,kBAEhBA,EAAgB,6BAGlBV,EAAOgB,GAAG,QAAQ,SAACC,GACjBnB,EAAKoB,KAAKD,GACVT,EAAYV,EAAKqB,OACjBT,EAAgB,uBAEjB,IAEHG,qBAAU,WACJf,EAAKsB,aAAaV,EAAgB,iBA4CxC,OACE,yBAAKW,UAAU,wBACb,wBAAIA,UAAU,gBAAgBZ,GAC9B,2CAAiBP,EAASa,YAA1B,WACA,6BACE,kBAAC,IAAD,CACEO,MAAM,gBACNC,OAAO,MACPC,WAAW,KACXC,UAbkB,WACxBzB,EAAO0B,KAAK,oBAAqBxB,KAc3B,kBAAC,IAAD,CAAQyB,QAAM,EAACN,UAAU,iBAAzB,WAIF,kBAAC,IAAD,CACEO,OA7CO,SAAC,GAA0C,EAAxCC,MAAyC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAE/Bb,EAAOpB,EAAKoB,KAAK,CACrBc,KAAMF,EACNG,GAAIF,EACJG,UAAW,MAIA,OAAThB,IAEJlB,EAAO0B,KAAK,OAAQ,CAAER,OAAMhB,WAAUI,MAAOR,EAAKqB,QAClDX,EAAYV,EAAKqB,OACjBT,EAAgB,+BAiCVyB,UA1DO,SAAC,GAAe,IAAbN,EAAY,EAAZA,MAEhB,OADalB,MAEFT,EAASa,aAClBc,EAAM,KAAO3B,EAASa,YAAY,KACb,IAArBjB,EAAKsB,aAsDDb,SAAUA,EACV6B,YAAalC,EAASa,YACtBM,UAAU,aACVgB,UAlCoB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAG7B,OADAC,QAAQC,IAAR,uBAA4BF,IACV,IAAdA,EAFa,IAGR,IAEY,GAAdA,GA6BDG,gBAAiB,CAAEC,gBAAiB,WACpCC,iBAAkB,CAAED,gBAAiB,gB,mCC7DhCE,G,OAvDE,WACf,IAAM5C,EAASC,qBAAWP,GADL,EAEOW,mBAAS,IAFhB,mBAEdwC,EAFc,KAENC,EAFM,OAGWzC,oBAAS,GAHpB,mBAGd0C,EAHc,KAGHC,EAHG,OAIa/C,qBAAWJ,GAArCK,EAJa,EAIbA,SAAUC,EAJG,EAIHA,YAElBU,qBAAU,WACRmC,GAAW,GACXhD,EAAOgB,GAAG,aAAa,SAACC,GACtBgC,MAAMhC,GACNd,EAAY,2BAAKD,GAAN,IAAgBgD,GAAI,MAC/BF,GAAW,QAEZ,IAWH,OACE,yBAAK3B,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK8B,KAAM,IACT,kBAAC,IAAD,CACEC,YAAY,OACZC,SAAU,SAACC,GACTR,EAAUQ,EAAMC,OAAOC,MAAMC,gBAE/BD,MAAOX,EACPa,KAAK,QACLrC,UAAU,aACVsC,UAAU,OAGd,kBAAC,IAAD,CAAKR,KAAM,IACT,kBAAC,IAAD,CACES,KAAK,UACLF,KAAK,QACLG,QA5BO,WACfb,GAAW,GACXhD,EAAO0B,KAAK,WAAY,CACtBmB,SACAiB,OAAQC,aAAaC,QAAQ,YAE/B7D,EAAY,2BAAKD,GAAN,IAAgBgD,GAAIL,MAuBvBK,GAAG,cACHe,QAASlB,GALX,kBCEKmB,G,OA1CI,WACjB,IAAMlE,EAASC,qBAAWP,GADH,EAEWO,qBAAWJ,GAArCK,EAFe,EAEfA,SAAUC,EAFK,EAELA,YAuBlB,OAAID,EAASgD,GAAGiB,OAAS,EAChB,gEAAsCjE,EAASgD,IAItD,kBAAC,IAAD,CACEU,KAAK,UACLC,QAjBe,WACjB,IAAMhB,EAVa,WAInB,IAHA,IACMuB,EAAQ,uCACVC,EAAS,GACJC,EAAI,EAAGA,EAHD,EAGaA,IAC1BD,GAAUD,EAAMG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,OAAS,KAC7D,OAAOE,EAIQK,GAEf1E,EAAO0B,KAAK,aAAc,CACxBmB,SACAiB,OAAQC,aAAaC,QAAQ,YAE/B7D,EAAY,2BAAKD,GAAN,IAAgBgD,GAAIL,EAAQ9B,YAAa,YAWlD2C,KAAK,QACLiB,OAAK,EACLzB,GAAG,iBALL,iBCnBW0B,G,OAZD,WACZ,OACE,yBAAKvD,UAAU,SACb,wBAAIA,UAAU,SAAd,4BACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,UCiEOwD,G,OApEH,WACV,IAAM7E,EAASC,qBAAWP,GADV,EAEsBW,oBAAS,GAF/B,mBAETyE,EAFS,KAEI1E,EAFJ,OAGgBC,mBAAS,CACvC6C,GAAI,GACJnC,YAAa,QACbT,MAAO,UANO,mBAGTJ,EAHS,KAGCC,EAHD,KAqChB,OA5BAU,qBAAU,WAC+B,OAAnCkD,aAAaC,QAAQ,WAEvBD,aAAagB,QAAQ,SAAUC,eAGjChF,EAAOgB,GAAG,aAAa,SAAClB,GACtB,IAAMgE,EAASC,aAAaC,QAAQ,UACpCzB,QAAQC,IAAI1C,GACZK,EAAY,CACV+C,GAAIpD,EAAKoD,GACTnC,YAAajB,EAAKmF,QAAQnB,GAC1BxD,MAAOR,EAAKQ,QAEdF,GAAe,MAGjBJ,EAAOgB,GAAG,WAAW,WACnBuB,QAAQC,IAAI,cACZpC,GAAe,GACfD,EAAY,CACV+C,GAAI,GACJnC,YAAa,QACbT,MAAO,eAGV,IAECwE,EAEA,yBAAKzD,UAAU,OACb,kBAAC6D,EAAYC,SAAb,CAAsB3B,MAAO,CAAEtD,WAAUC,cAAaC,mBACpD,kBAAC,EAAD,MACA,uBAAGiB,UAAU,WAAb,UACU,IACR,uBAAG+D,KAAK,4BAA4B7B,OAAO,UAA3C,qBASN,yBAAKlC,UAAU,OACb,kBAAC6D,EAAYC,SAAb,CAAsB3B,MAAO,CAAEtD,WAAUC,gBACvC,kBAAC,EAAD,MACA,uBAAGkB,UAAU,WAAb,UACU,IACR,uBAAG+D,KAAK,4BAA4B7B,OAAO,UAA3C,uBCtDQ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAEiB,WAAtBH,OAAOC,SAASG,MCbjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAcV,SAAf,CAAwB3B,MAAOjE,KAC7B,kBAAC,EAAD,QAGJuG,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.dd58000d.chunk.js","sourcesContent":["import io from \"socket.io-client\";\n\nconst Socket = () => {\n  return io(process.env.REACT_APP_SERVER_URL);\n};\n\nexport default Socket;\n","import React from \"react\";\n\nconst SocketContext = React.createContext(null);\n\nexport default SocketContext;\n","import Socket from \"./socket\";\nimport SocketContext from \"./context\";\n\nexport default Socket;\n\nexport { SocketContext };\n","import GameContext from \"./context\";\n\nexport default GameContext;\n","import React from \"react\";\n\nconst GameContext = React.createContext(null);\n\nexport default GameContext;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport Chess from \"chess.js\";\nimport { SocketContext } from \"../Socket\";\nimport GameContext from \"../Game\";\nimport { Button, Popconfirm } from \"antd\";\nimport \"./board.css\";\n\nlet game = null;\n\nconst Board = () => {\n  const socket = useContext(SocketContext);\n  const { gameInfo, setGameInfo, setGameStarted } = useContext(GameContext);\n\n  const [position, setPosition] = useState(gameInfo.board);\n  const [notification, setNotification] = useState(\"\");\n\n  const getTurn = () => {\n    let turn = game.turn();\n\n    switch (turn) {\n      case \"w\":\n        turn = \"white\";\n        break;\n      case \"b\":\n        turn = \"black\";\n        break;\n      default:\n        turn = \"white\";\n    }\n    return turn;\n  };\n\n  useEffect(() => {\n    if (gameInfo.board === \"start\") {\n      game = new Chess();\n    } else {\n      game = new Chess(gameInfo.board);\n    }\n\n    const turn = getTurn();\n    if (turn === gameInfo.playerColor) {\n      setNotification(\"It's your turn\");\n    } else {\n      setNotification(\"It's your opponent's turn\");\n    }\n\n    socket.on(\"move\", (msg) => {\n      game.move(msg);\n      setPosition(game.fen());\n      setNotification(\"It's your turn\");\n    });\n  }, []);\n\n  useEffect(() => {\n    if (game.game_over()) setNotification(\"Game over!\");\n  });\n\n  const onDrag = ({ piece }) => {\n    const turn = getTurn();\n    if (\n      turn !== gameInfo.playerColor ||\n      piece[0] !== gameInfo.playerColor[0] ||\n      game.game_over() === true\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  const onDrop = ({ piece, sourceSquare, targetSquare }) => {\n    // Check if the move is legal\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\",\n    });\n\n    // Illegal move\n    if (move === null) return;\n\n    socket.emit(\"move\", { move, gameInfo, board: game.fen() });\n    setPosition(game.fen());\n    setNotification(\"It's your opponent's turn\");\n  };\n\n  const calculateBoardWidth = ({ screenWidth }) => {\n    const maxWidth = 500;\n    console.log(`screenWidth: ${screenWidth}`);\n    if (screenWidth * 0.75 > maxWidth) {\n      return 500;\n    }\n    return screenWidth * 0.9;\n  };\n\n  const resignFromTheGame = () => {\n    socket.emit(\"resignFromTheGame\", gameInfo);\n  };\n\n  return (\n    <div className=\"chessboard-container\">\n      <h3 className=\"notification\">{notification}</h3>\n      <p>You play the {gameInfo.playerColor} pieces</p>\n      <div>\n        <Popconfirm\n          title=\"Are you sure?\"\n          okText=\"Yes\"\n          cancelText=\"No\"\n          onConfirm={resignFromTheGame}\n        >\n          <Button danger className=\"resign-button\">\n            Resign\n          </Button>\n        </Popconfirm>\n        <Chessboard\n          onDrop={onDrop}\n          allowDrag={onDrag}\n          position={position}\n          orientation={gameInfo.playerColor}\n          className=\"chessboard\"\n          calcWidth={calculateBoardWidth}\n          darkSquareStyle={{ backgroundColor: \"#855E42\" }}\n          lightSquareStyle={{ backgroundColor: \"#f7f7f7\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { SocketContext } from \"../Socket\";\nimport GameContext from \"../Game\";\nimport { Button, Input, Row, Col } from \"antd\";\nimport \"./join.css\";\n\nconst JoinGame = () => {\n  const socket = useContext(SocketContext);\n  const [gameId, setGameId] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const { gameInfo, setGameInfo } = useContext(GameContext);\n\n  useEffect(() => {\n    setLoading(false);\n    socket.on(\"joinError\", (msg) => {\n      alert(msg);\n      setGameInfo({ ...gameInfo, id: \"\" });\n      setLoading(false);\n    });\n  }, []);\n\n  const joinGame = () => {\n    setLoading(true);\n    socket.emit(\"joinGame\", {\n      gameId,\n      userId: localStorage.getItem(\"userId\"),\n    });\n    setGameInfo({ ...gameInfo, id: gameId });\n  };\n\n  return (\n    <div className=\"join\">\n      <Row>\n        <Col span={14}>\n          <Input\n            placeholder=\"Code\"\n            onChange={(event) => {\n              setGameId(event.target.value.toUpperCase());\n            }}\n            value={gameId}\n            size=\"large\"\n            className=\"join-input\"\n            maxlength=\"6\"\n          />\n        </Col>\n        <Col span={10}>\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            onClick={joinGame}\n            id=\"join-button\"\n            loading={isLoading}\n          >\n            Join Game\n          </Button>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default JoinGame;\n","import React, { useContext } from \"react\";\nimport { SocketContext } from \"../Socket\";\nimport GameContext from \"../Game\";\nimport { Button } from \"antd\";\nimport \"./create.css\";\n\nconst CreateGame = () => {\n  const socket = useContext(SocketContext);\n  const { gameInfo, setGameInfo } = useContext(GameContext);\n\n  //const [gameId, setGameId] = useState(\"\");\n\n  const randomString = () => {\n    const length = 6;\n    const chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let result = \"\";\n    for (let i = 0; i < length; i++)\n      result += chars[Math.round(Math.random() * (chars.length - 1))];\n    return result;\n  };\n\n  const createGame = () => {\n    const gameId = randomString();\n\n    socket.emit(\"createGame\", {\n      gameId,\n      userId: localStorage.getItem(\"userId\"),\n    });\n    setGameInfo({ ...gameInfo, id: gameId, playerColor: \"white\" });\n  };\n\n  if (gameInfo.id.length > 0) {\n    return <p>Share this code with your friend: {gameInfo.id}</p>;\n  }\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={createGame}\n      size=\"large\"\n      block\n      id=\"create-button\"\n    >\n      Create Game\n    </Button>\n  );\n};\n\nexport default CreateGame;\n","import React from \"react\";\nimport JoinGame from \"../JoinGame\";\nimport CreateGame from \"../CreateGame\";\nimport \"./lobby.css\";\n\nconst Lobby = () => {\n  return (\n    <div className=\"lobby\">\n      <h2 className=\"title\">Multiplayer Chess &#9823;</h2>\n      <div className=\"game-menu\">\n        <CreateGame />\n        <JoinGame />\n      </div>\n    </div>\n  );\n};\n\nexport default Lobby;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { v1 as uuid } from \"uuid\";\nimport Board from \"../Board\";\nimport Lobby from \"../Lobby\";\nimport { SocketContext } from \"../Socket\";\nimport GameContext from \"../Game\";\nimport \"./App.css\";\n\nconst App = () => {\n  const socket = useContext(SocketContext);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameInfo, setGameInfo] = useState({\n    id: \"\",\n    playerColor: \"black\",\n    board: \"start\",\n  });\n\n  useEffect(() => {\n    if (localStorage.getItem(\"userId\") === null) {\n      //Generate new user id if none found in local storage\n      localStorage.setItem(\"userId\", uuid());\n    }\n\n    socket.on(\"startGame\", (game) => {\n      const userId = localStorage.getItem(\"userId\");\n      console.log(game);\n      setGameInfo({\n        id: game.id,\n        playerColor: game.players[userId],\n        board: game.board,\n      });\n      setGameStarted(true);\n    });\n\n    socket.on(\"endGame\", () => {\n      console.log(\"game ended\");\n      setGameStarted(false);\n      setGameInfo({\n        id: \"\",\n        playerColor: \"black\",\n        board: \"start\",\n      });\n    });\n  }, []);\n\n  if (gameStarted) {\n    return (\n      <div className=\"App\">\n        <GameContext.Provider value={{ gameInfo, setGameInfo, setGameStarted }}>\n          <Board />\n          <p className=\"made-by\">\n            Made by{\" \"}\n            <a href=\"https://andreiushakov.com\" target=\"_blank\">\n              Andrei Ushakov\n            </a>\n          </p>\n        </GameContext.Provider>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <GameContext.Provider value={{ gameInfo, setGameInfo }}>\n          <Lobby />\n          <p className=\"made-by\">\n            Made by{\" \"}\n            <a href=\"https://andreiushakov.com\" target=\"_blank\">\n              Andrei Ushakov\n            </a>\n          </p>\n        </GameContext.Provider>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    ) || \n\twindow.location.host==\"0.0.0.0\"\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport Socket, { SocketContext } from \"./components/Socket\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SocketContext.Provider value={Socket()}>\n      <App />\n    </SocketContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}